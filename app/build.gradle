/**
 * Gradle Build File della applicazione specifica.
 */

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'io.gitlab.arturbosch.detekt'
    id 'com.google.gms.google-services'
    id 'org.jetbrains.dokka'
    id 'org.barfuin.gradle.jacocolog' version '2.0.0'
}

android {
    namespace 'com.example.floraleye'
    compileSdk 33

    defaultConfig {
        applicationId "com.example.floraleye"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        coreLibraryDesugaringEnabled true
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
        dataBinding true
        mlModelBinding true
    }
    testOptions {
        unitTests.all {
            exclude "**/FailingUnitTest.*"
        }
        unitTests.returnDefaultValues = true
    }

}

dependencies {

    implementation "androidx.security:security-crypto:1.1.0-alpha05"
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.4.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.4.1'
    implementation 'androidx.navigation:navigation-ui-ktx:2.4.1'
    implementation 'androidx.test:monitor:1.5.0'
    implementation 'androidx.test.ext:junit-ktx:1.1.5'

    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.2.0-alpha01"

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.test:core:1.5.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'

    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.3.0'

    implementation platform('com.google.firebase:firebase-bom:31.3.0')
    implementation 'com.google.firebase:firebase-auth-ktx'
    implementation 'com.google.firebase:firebase-database-ktx'
    implementation 'com.google.firebase:firebase-firestore-ktx'

    implementation 'com.github.bumptech.glide:glide:4.15.1'

    implementation "androidx.activity:activity-ktx:1.6.0-rc01"

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.3'

    implementation 'com.mikhaellopez:circularprogressbar:3.1.0'

    implementation 'androidx.viewpager2:viewpager2:1.0.0'
    implementation 'com.google.android.material:material:1.9.0'

    implementation 'org.tensorflow:tensorflow-lite-support:0.1.0'
    implementation 'org.tensorflow:tensorflow-lite-metadata:0.1.0'
    implementation 'org.tensorflow:tensorflow-lite-gpu:2.4.0'
}

/**
 * Configurazione di detekt.
 */
detekt {

    // Versione di detekt utilizzata.
    toolVersion = "1.22.0"

    parallel = false

    // Definizione del file di configurazione di detekt da utilizzare.
    config = files("$rootDir/.detekt/configuration.yml")

    buildUponDefaultConfig = false

    // Considera tutte le regole. False di default.
    allRules = false

    // Disabilitazione delle regole di default, per considerare le nostre.
    disableDefaultRuleSets = false

    debug = false

    // Se settata a true, la build non fallisce anche se si supera il contatore maxIssues.
    ignoreFailures = false

    ignoredBuildTypes = ["release"]

    ignoredFlavors = ["production"]

    ignoredVariants = ["productionRelease"]

    basePath = projectDir
}

/**
 * Configurazione di Jacoco.
 */
apply plugin: 'jacoco'
jacoco {
    toolVersion = "$jacocoVersion"
    reportsDirectory = file("$buildDir/reports/coverage")
}
tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoTestReports(type: JacocoReport, dependsOn: []) {
    group = "Verification"
    description = "Creates JaCoCo test coverage report"

    // File da escludere:
    // Classi generate ecc.
    def excludes = [
            // data binding
            'android/databinding/**/*.class',
            '**/android/databinding/*Binding.class',
            '**/android/databinding/*',
            '**/androidx/databinding/*',
            '**/BR.*',
            // android
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            // kotlin
            '**/*MapperImpl*.*',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/*Component*.*',
            '**/*$Lambda$*.*',
            '**/*Companion*.*',
            '**/*Module*.*',
            '**/*Dagger*.*',
            '**/*Hilt*.*',
            '**/*MembersInjector*.*',
            '**/*_MembersInjector.class',
            '**/*_Factory*.*',
            '**/*_Provide*Factory*.*',
            '**/*Extensions*.*',
            // sealed e data classes
            '**/*$Result.*',
            '**/*$Result$*.*'
    ]

    // Classi generate
    classDirectories.from = fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: excludes
    )
    // Sorgenti
    sourceDirectories.from = [
            android.sourceSets.main.java.srcDirs
    ]
    // Output e dati esistenti
    // Combina i report degli unit test e degli instrumented test
    executionData.from = fileTree(dir: "$buildDir", includes: [
            "outputs/code_coverage/*.ec"
    ])
}

task jacocoCombinedTestReports(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    group = "Verification"
    description = "Creates JaCoCo test coverage report for Unit and Instrumented Tests (combined) on the Debug build"

    // File da escludere:
    // Classi generate ecc.
    def excludes = [
            // data binding
            'android/databinding/**/*.class',
            '**/android/databinding/*Binding.class',
            '**/android/databinding/*',
            '**/androidx/databinding/*',
            '**/BR.*',
            // android
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            // kotlin
            '**/*MapperImpl*.*',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/*Component*.*',
            '**/*$Lambda$*.*',
            '**/*Companion*.*',
            '**/*Module*.*',
            '**/*Dagger*.*',
            '**/*Hilt*.*',
            '**/*MembersInjector*.*',
            '**/*_MembersInjector.class',
            '**/*_Factory*.*',
            '**/*_Provide*Factory*.*',
            '**/*Extensions*.*',
            // sealed e data classes
            '**/*$Result.*',
            '**/*$Result$*.*'
    ]

    // Classi generate
    classDirectories.from = fileTree(
            dir: "$buildDir/intermediates/classes/debug",
            excludes: excludes
    ) + fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: excludes
    )
    // Sorgenti
    sourceDirectories.from = [
            android.sourceSets.main.java.srcDirs,
            "src/main/kotlin"
    ]
    // Output e dati esistenti
    // Combina i report degli unit test e degli instrumented test
    executionData.from = fileTree(dir: "$buildDir", includes: [
            // Coverage degli unit test
            "outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec",
            // Coverage degli instrumented test
            "outputs/code_coverage/debugAndroidTest/connected/*/coverage.ec"
    ])
}

task jacocoUnitTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    // File da escludere:
    // Classi generate ecc.
    def excludes = [
            // data binding
            'android/databinding/**/*.class',
            '**/android/databinding/*Binding.class',
            '**/android/databinding/*',
            '**/androidx/databinding/*',
            '**/BR.*',
            // android
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            // kotlin
            '**/*MapperImpl*.*',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/*Component*.*',
            '**/*$Lambda$*.*',
            '**/*Companion*.*',
            '**/*Module*.*',
            '**/*Dagger*.*',
            '**/*Hilt*.*',
            '**/*MembersInjector*.*',
            '**/*_MembersInjector.class',
            '**/*_Factory*.*',
            '**/*_Provide*Factory*.*',
            '**/*Extensions*.*',
            // sealed e data classes
            '**/*$Result.*',
            '**/*$Result$*.*',
            // classi diverse dal Model
            '**/com/example/floraleye/repositories/**/*.*',
            '**/com/example/floraleye/ui/**/*.*',
            '**/com/example/floraleye/utils/**/*.*',
            '**/com/example/floraleye/viewmodels/**/*.*',
            '**/com/example/floraleye/*.*',
    ]

    // Classi generate
    classDirectories.from = fileTree(
            dir: "$buildDir/intermediates/classes/debug",
            excludes: excludes
    ) + fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: excludes
    )
    // Sorgenti
    sourceDirectories.from = [
            android.sourceSets.main.java.srcDirs,
            "src/main/kotlin"
    ]
    // Output e dati esistenti
    executionData.from = fileTree(dir: "$buildDir", includes: [
            // Coverage degli unit test
            "outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec",
    ])
}


/**
 * Configurazione di Dokka.
 */
tasks.withType(dokkaHtml.getClass()).configureEach {

    var dokkaBaseConfiguration = """
    {
      "footerMessage": "(c) 2023 FloralEye",
      "separateInheritedMembers": true,
      "mergeImplicitExpectActualDeclarations": false
    }
    """

    outputDirectory = file("$rootDir/public")

    pluginsMapConfiguration.set(
            ["org.jetbrains.dokka.base.DokkaBase": dokkaBaseConfiguration]
    )
}
